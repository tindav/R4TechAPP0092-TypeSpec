/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface Coordinate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The latitude property
     */
    latitude?: number;
    /**
     * The longitude property
     */
    longitude?: number;
}
export function createCoordinateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCoordinate;
}
export function createDawnDuskCalculationInputRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDawnDuskCalculationInputRequest;
}
export function createDawnDuskCalculationOutputResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDawnDuskCalculationOutputResponse;
}
export function createErrorDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoErrorDetail;
}
export function createErrorPayload_errorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoErrorPayload_error;
}
export function createErrorPayloadFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoErrorPayload;
}
export function createSpatialCoordinateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSpatialCoordinate;
}
export interface DawnDuskCalculationInputRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Coordinate of the location
     */
    coordinates?: Coordinate;
    /**
     * Date for the DawnDusk calculation
     */
    date?: Date;
}
export interface DawnDuskCalculationOutputResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The calculationId property
     */
    calculationId?: Guid;
    /**
     * Sunrise time
     */
    sunrise?: Date;
    /**
     * Sunset time
     */
    sunset?: Date;
    /**
     * Zenith time
     */
    zenith?: Date;
}
export function deserializeIntoCoordinate(coordinate: Coordinate | undefined = {} as Coordinate) : Record<string, (node: ParseNode) => void> {
    return {
        "latitude": n => { coordinate.latitude = n.getNumberValue(); },
        "longitude": n => { coordinate.longitude = n.getNumberValue(); },
    }
}
export function deserializeIntoDawnDuskCalculationInputRequest(dawnDuskCalculationInputRequest: DawnDuskCalculationInputRequest | undefined = {} as DawnDuskCalculationInputRequest) : Record<string, (node: ParseNode) => void> {
    return {
        "coordinates": n => { dawnDuskCalculationInputRequest.coordinates = n.getObjectValue<Coordinate>(createCoordinateFromDiscriminatorValue); },
        "date": n => { dawnDuskCalculationInputRequest.date = n.getDateValue(); },
    }
}
export function deserializeIntoDawnDuskCalculationOutputResponse(dawnDuskCalculationOutputResponse: DawnDuskCalculationOutputResponse | undefined = {} as DawnDuskCalculationOutputResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "calculationId": n => { dawnDuskCalculationOutputResponse.calculationId = n.getGuidValue(); },
        "sunrise": n => { dawnDuskCalculationOutputResponse.sunrise = n.getDateValue(); },
        "sunset": n => { dawnDuskCalculationOutputResponse.sunset = n.getDateValue(); },
        "zenith": n => { dawnDuskCalculationOutputResponse.zenith = n.getDateValue(); },
    }
}
export function deserializeIntoErrorDetail(errorDetail: ErrorDetail | undefined = {} as ErrorDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { errorDetail.code = n.getStringValue(); },
        "errorCode": n => { errorDetail.errorCode = n.getStringValue(); },
        "location": n => { errorDetail.location = n.getStringValue(); },
        "message": n => { errorDetail.message = n.getStringValue(); },
        "path": n => { errorDetail.path = n.getStringValue(); },
        "target": n => { errorDetail.target = n.getStringValue(); },
    }
}
export function deserializeIntoErrorPayload(errorPayload: ErrorPayload | undefined = {} as ErrorPayload) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { errorPayload.errorEscaped = n.getObjectValue<ErrorPayload_error>(createErrorPayload_errorFromDiscriminatorValue); },
    }
}
export function deserializeIntoErrorPayload_error(errorPayload_error: ErrorPayload_error | undefined = {} as ErrorPayload_error) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { errorPayload_error.code = n.getStringValue(); },
        "details": n => { errorPayload_error.details = n.getCollectionOfObjectValues<ErrorDetail>(createErrorDetailFromDiscriminatorValue); },
        "message": n => { errorPayload_error.message = n.getStringValue(); },
    }
}
export function deserializeIntoSpatialCoordinate(spatialCoordinate: SpatialCoordinate | undefined = {} as SpatialCoordinate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCoordinate(spatialCoordinate),
        "altitude": n => { spatialCoordinate.altitude = n.getNumberValue(); },
    }
}
export interface ErrorDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The code property
     */
    code?: string;
    /**
     * The errorCode property
     */
    errorCode?: string;
    /**
     * The location property
     */
    location?: string;
    /**
     * The message property
     */
    message?: string;
    /**
     * The path property
     */
    path?: string;
    /**
     * The target property
     */
    target?: string;
}
export interface ErrorPayload extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error property
     */
    errorEscaped?: ErrorPayload_error;
}
export interface ErrorPayload_error extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The code property
     */
    code?: string;
    /**
     * The details property
     */
    details?: ErrorDetail[];
    /**
     * The message property
     */
    message?: string;
}
export function serializeCoordinate(writer: SerializationWriter, coordinate: Coordinate | undefined = {} as Coordinate) : void {
    writer.writeNumberValue("latitude", coordinate.latitude);
    writer.writeNumberValue("longitude", coordinate.longitude);
    writer.writeAdditionalData(coordinate.additionalData);
}
export function serializeDawnDuskCalculationInputRequest(writer: SerializationWriter, dawnDuskCalculationInputRequest: DawnDuskCalculationInputRequest | undefined = {} as DawnDuskCalculationInputRequest) : void {
    writer.writeObjectValue<Coordinate>("coordinates", dawnDuskCalculationInputRequest.coordinates, serializeCoordinate);
    writer.writeDateValue("date", dawnDuskCalculationInputRequest.date);
    writer.writeAdditionalData(dawnDuskCalculationInputRequest.additionalData);
}
export function serializeDawnDuskCalculationOutputResponse(writer: SerializationWriter, dawnDuskCalculationOutputResponse: DawnDuskCalculationOutputResponse | undefined = {} as DawnDuskCalculationOutputResponse) : void {
    writer.writeGuidValue("calculationId", dawnDuskCalculationOutputResponse.calculationId);
    writer.writeDateValue("sunrise", dawnDuskCalculationOutputResponse.sunrise);
    writer.writeDateValue("sunset", dawnDuskCalculationOutputResponse.sunset);
    writer.writeDateValue("zenith", dawnDuskCalculationOutputResponse.zenith);
    writer.writeAdditionalData(dawnDuskCalculationOutputResponse.additionalData);
}
export function serializeErrorDetail(writer: SerializationWriter, errorDetail: ErrorDetail | undefined = {} as ErrorDetail) : void {
    writer.writeStringValue("code", errorDetail.code);
    writer.writeStringValue("errorCode", errorDetail.errorCode);
    writer.writeStringValue("location", errorDetail.location);
    writer.writeStringValue("message", errorDetail.message);
    writer.writeStringValue("path", errorDetail.path);
    writer.writeStringValue("target", errorDetail.target);
    writer.writeAdditionalData(errorDetail.additionalData);
}
export function serializeErrorPayload(writer: SerializationWriter, errorPayload: ErrorPayload | undefined = {} as ErrorPayload) : void {
    writer.writeObjectValue<ErrorPayload_error>("error", errorPayload.errorEscaped, serializeErrorPayload_error);
    writer.writeAdditionalData(errorPayload.additionalData);
}
export function serializeErrorPayload_error(writer: SerializationWriter, errorPayload_error: ErrorPayload_error | undefined = {} as ErrorPayload_error) : void {
    writer.writeStringValue("code", errorPayload_error.code);
    writer.writeCollectionOfObjectValues<ErrorDetail>("details", errorPayload_error.details, serializeErrorDetail);
    writer.writeStringValue("message", errorPayload_error.message);
    writer.writeAdditionalData(errorPayload_error.additionalData);
}
export function serializeSpatialCoordinate(writer: SerializationWriter, spatialCoordinate: SpatialCoordinate | undefined = {} as SpatialCoordinate) : void {
    serializeCoordinate(writer, spatialCoordinate)
    writer.writeNumberValue("altitude", spatialCoordinate.altitude);
}
export interface SpatialCoordinate extends Coordinate, Parsable {
    /**
     * The altitude property
     */
    altitude?: number;
}
/* tslint:enable */
/* eslint-enable */
