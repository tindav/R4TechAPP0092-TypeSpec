/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDawnDuskCalculationOutputResponseFromDiscriminatorValue, createErrorPayloadFromDiscriminatorValue, deserializeIntoDawnDuskCalculationInputRequest, deserializeIntoDawnDuskCalculationOutputResponse, deserializeIntoErrorPayload, serializeDawnDuskCalculationInputRequest, serializeDawnDuskCalculationOutputResponse, serializeErrorPayload, type DawnDuskCalculationInputRequest, type DawnDuskCalculationOutputResponse, type ErrorPayload } from '../../../../models/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v1/api/dawnduskcalculation/{calculationType}
 */
export class WithCalculationTypeItemRequestBuilder extends BaseRequestBuilder<WithCalculationTypeItemRequestBuilder> {
    /**
     * Instantiates a new WithCalculationTypeItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/v1/api/dawnduskcalculation/{calculationType}", (x, y) => new WithCalculationTypeItemRequestBuilder(x, y));
    }
    /**
     * DawnDusk Calculation
     * @param body Input request for DawnDusk Calculation
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of DawnDuskCalculationOutputResponse
     */
    public post(body: DawnDuskCalculationInputRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DawnDuskCalculationOutputResponse | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "400": createErrorPayloadFromDiscriminatorValue,
            "401": createErrorPayloadFromDiscriminatorValue,
            "500": createErrorPayloadFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<DawnDuskCalculationOutputResponse>(requestInfo, createDawnDuskCalculationOutputResponseFromDiscriminatorValue, errorMapping);
    }
    /**
     * DawnDusk Calculation
     * @param body Input request for DawnDusk Calculation
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: DawnDuskCalculationInputRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeDawnDuskCalculationInputRequest);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
