// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Ready4Tech.Kiota.Client.Models {
    /// <summary>
    /// Input request for DawnDusk Calculation
    /// </summary>
    public class DawnDuskCalculationInputRequest : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Coordinate of the location</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Coordinate? Coordinates { get; set; }
#nullable restore
#else
        public Coordinate Coordinates { get; set; }
#endif
        /// <summary>Date for the DawnDusk calculation</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>
        /// Instantiates a new DawnDuskCalculationInputRequest and sets the default values.
        /// </summary>
        public DawnDuskCalculationInputRequest() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DawnDuskCalculationInputRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DawnDuskCalculationInputRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"coordinates", n => { Coordinates = n.GetObjectValue<Coordinate>(Coordinate.CreateFromDiscriminatorValue); } },
                {"date", n => { Date = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Coordinate>("coordinates", Coordinates);
            writer.WriteDateTimeOffsetValue("date", Date);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
