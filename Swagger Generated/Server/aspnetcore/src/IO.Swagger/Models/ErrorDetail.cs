/*
 * Ready4Tech API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Models;

/// <summary>
/// </summary>
[DataContract]
public class ErrorDetail : IEquatable<ErrorDetail>
{
    /// <summary>
    ///     Gets or Sets Path
    /// </summary>

    [DataMember(Name = "path")]
    public string Path { get; set; }

    /// <summary>
    ///     Gets or Sets Location
    /// </summary>

    [DataMember(Name = "location")]
    public string Location { get; set; }

    /// <summary>
    ///     Gets or Sets Target
    /// </summary>

    [DataMember(Name = "target")]
    public string Target { get; set; }

    /// <summary>
    ///     Gets or Sets Message
    /// </summary>

    [DataMember(Name = "message")]
    public string Message { get; set; }

    /// <summary>
    ///     Gets or Sets ErrorCode
    /// </summary>

    [DataMember(Name = "errorCode")]
    public string ErrorCode { get; set; }

    /// <summary>
    ///     Gets or Sets Code
    /// </summary>

    [DataMember(Name = "code")]
    public string Code { get; set; }

    /// <summary>
    ///     Returns true if ErrorDetail instances are equal
    /// </summary>
    /// <param name="other">Instance of ErrorDetail to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ErrorDetail other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                Path == other.Path ||
                (Path != null &&
                 Path.Equals(other.Path))
            ) &&
            (
                Location == other.Location ||
                (Location != null &&
                 Location.Equals(other.Location))
            ) &&
            (
                Target == other.Target ||
                (Target != null &&
                 Target.Equals(other.Target))
            ) &&
            (
                Message == other.Message ||
                (Message != null &&
                 Message.Equals(other.Message))
            ) &&
            (
                ErrorCode == other.ErrorCode ||
                (ErrorCode != null &&
                 ErrorCode.Equals(other.ErrorCode))
            ) &&
            (
                Code == other.Code ||
                (Code != null &&
                 Code.Equals(other.Code))
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ErrorDetail {\n");
        sb.Append("  Path: ").Append(Path).Append("\n");
        sb.Append("  Location: ").Append(Location).Append("\n");
        sb.Append("  Target: ").Append(Target).Append("\n");
        sb.Append("  Message: ").Append(Message).Append("\n");
        sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
        sb.Append("  Code: ").Append(Code).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((ErrorDetail)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Path != null)
                hashCode = hashCode * 59 + Path.GetHashCode();
            if (Location != null)
                hashCode = hashCode * 59 + Location.GetHashCode();
            if (Target != null)
                hashCode = hashCode * 59 + Target.GetHashCode();
            if (Message != null)
                hashCode = hashCode * 59 + Message.GetHashCode();
            if (ErrorCode != null)
                hashCode = hashCode * 59 + ErrorCode.GetHashCode();
            if (Code != null)
                hashCode = hashCode * 59 + Code.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(ErrorDetail left, ErrorDetail right) => Equals(left, right);

    public static bool operator !=(ErrorDetail left, ErrorDetail right) => !Equals(left, right);

#pragma warning restore 1591

    #endregion Operators
}