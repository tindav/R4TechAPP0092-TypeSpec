/*
 * Ready4Tech API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Models;

/// <summary>
/// </summary>
[DataContract]
public class SpatialCoordinate : Coordinate, IEquatable<SpatialCoordinate>
{
    /// <summary>
    ///     Gets or Sets Altitude
    /// </summary>
    [Required]
    [DataMember(Name = "altitude")]
    public double? Altitude { get; set; }

    /// <summary>
    ///     Returns true if SpatialCoordinate instances are equal
    /// </summary>
    /// <param name="other">Instance of SpatialCoordinate to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SpatialCoordinate other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            Altitude == other.Altitude ||
            (Altitude != null &&
             Altitude.Equals(other.Altitude));
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SpatialCoordinate {\n");
        sb.Append("  Altitude: ").Append(Altitude).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public new string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((SpatialCoordinate)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Altitude != null)
                hashCode = hashCode * 59 + Altitude.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(SpatialCoordinate left, SpatialCoordinate right) => Equals(left, right);

    public static bool operator !=(SpatialCoordinate left, SpatialCoordinate right) => !Equals(left, right);

#pragma warning restore 1591

    #endregion Operators
}